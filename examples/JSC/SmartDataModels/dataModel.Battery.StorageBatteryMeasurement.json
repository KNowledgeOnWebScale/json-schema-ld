{
  "$schema": "http://json-schema.org/schema#",
  "modelTags": "",
  "$id": "https://smart-data-models.github.io/data-models.Energy/StorageBatteryMeasurement/schema.json",
  "$schemaVersion": "0.0.2",
  "title": "Smart Data Models. Storage Battery Measurement schema",
  "description": "Storage Battery Observed Data Model is intended to measure the remaining energy capacity in a battery, which can be redistributed in the form of electrical energy. These functions apply from a source which depends on the type of battery (reference to the attribute 'batteryType' of the Data Model `StorageBatteryDevice`).",
  "type": "object",
  "allOf": [
    {
      "$ref": "https://smart-data-models.github.io/data-models/common-schema.json#/definitions/GSMA-Commons"
    },
    {
      "$ref": "https://smart-data-models.github.io/data-models/common-schema.json#/definitions/Location-Commons"
    },
    {
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "StorageBatteryMeasurement"
          ],
          "description": "Property. NGSI Entity type. It has to be StorageBatteryMeasurement"
        },
        "refStorageBatteryDevice": {
          "anyOf": [
            {
              "type": "string",
              "minLength": 1,
              "maxLength": 256,
              "pattern": "^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$",
              "description": "Property. Identifier format of any NGSI entity"
            },
            {
              "type": "string",
              "format": "uri",
              "description": "Property. Identifier format of any NGSI entity"
            }
          ],
          "description": "Relationship. Reference to a [Storage Battery Device](https://github.com/FIWARE/data-models/blob/master/specs/Energy/StorageBatteryDevice/doc/spec.md) which captured this observation, if the entity is used."
        },
        "refPointOfInterest": {
          "anyOf": [
            {
              "type": "string",
              "minLength": 1,
              "maxLength": 256,
              "pattern": "^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$",
              "description": "Property. Identifier format of any NGSI entity"
            },
            {
              "type": "string",
              "format": "uri",
              "description": "Property. Identifier format of any NGSI entity"
            }
          ],
          "description": "Relationship. Reference to a [PointOfInterest](https://github.com/smart-data-models/dataModel.PointOfInterest/blob/master/PointOfInterest/doc/spec.md) linked with the Repository."
        },
        "dateObservedFrom": {
          "type": "string",
          "format": "date-time",
          "description": "Property. Model:'https://schema.org/DateTime'. Observation period: Start date and time in an ISO8601 UTC format. The attribute can be used in addition to the 'dateObserved' attribute when it corresponds to a time interval to be highlighted."
        },
        "dateObservedTo": {
          "type": "string",
          "format": "date-time",
          "description": "Property. Model:'https://schema.org/DateTime'. Observation period: End date and time in an ISO8601 UTC format. The attribute can be used in addition to the 'dateObserved' attribute when it corresponds to a time interval to be highlighted."
        },
        "batteryLevel": {
          "oneOf": [
            {
              "type": "number",
              "minimum": 0,
              "maximum": 1
            },
            {
              "type": "number",
              "enum": [-1]
            }
          ],
          "description": "Property. Model:'https://schema.org/Number'. Device's battery level. A unique value of the following value 0.0=battery empty, 1.0=Battery full, -1.0=Transiently not determined."
        },
        "batteryStatus": {
          "type": "string",
          "enum": [
            "consumingEnergy",
            "givingEnergy",
            "standby"
          ],
          "description": "Property. Status of the battery during the measurement( giving or not energy). Enum:'consumingEnergy, givingEnergy, standby'"
        },
        "batteryAssessmentMethods": {
          "type": "string",
          "enum": [
            "ampereHourMetry",
            "dischargeTest",
            "electrolyteDensity",
            "highFrequencyImpedance",
            "lowFrequencyImpedance",
            "mathematicalModel",
            "operatingVoltageWithClosedCircuit",
            "quiescentVoltageWithOpenCircuit"
          ],
          "description": "Property. Assessment and calculation methods for measurements assessing the condition of the battery. Enum:'ampereHourMetry, dischargeTest, electrolyteDensity, highFrequencyImpedance, lowFrequencyImpedance, mathematicalModel, operatingVoltageWithClosedCircuit, quiescentVoltageWithOpenCircuit'"
        },
        "dateEnergyMeteringStarted": {
          "type": "string",
          "format": "date-time",
          "description": "Property. The starting date for metering energy in an ISO8601 UTC format. Model:'https://schema.org/DateTime'."
        },
        "temperature": {
          "type": "number",
          "minimum": 0,
          "description": "Property. Main Temperature recorded at the time of Observation compared to the  nominal reference temperature of the device. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **CEL** represents Degree Celsius. Model:'https://schema.org/Number'. Units:'celsius degrees '."
        },
        "stateOfCharge": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "Property. The State of Charge (Code SoC) expressed in % is defined as the ratio between the remaining and the current capacities. The current capacity is the maximum capacity that can be withdrawn from the fully charged battery under specific discharge conditions. Rule [SOC] + [DOD] = 100 %. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **P1** represents Percent. Model:'https://schema.org/Number'."
        },
        "deepOfDischarge": {
          "type": "number",
          "description": "Property. The Deep of Discharge (Code DoD) expressed in % is the ratio between the capacity already discharged and the nominal capacity of the accumulator. That is to say the energy consumed in the battery. Rule  [DOD] = 100 % - [SOC]. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **P1** represents Percent. Model:'https://schema.org/Number'.",
          "minimum": 0,
          "maximum": 1
        },
        "stateOfHealth": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "Property. The State of Health  (Code SoH) expressed in % is defined as the ratio between the maximum amount of charge that a fully charged battery can provide under its nominal discharge regime, and its nominal capacity. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **P1** represents Percent. Model:'https://schema.org/Number'."
        },
        "activePower": {
          "type": "number",
          "description": "Property. Active Power, where 'phi' is the phase shift of the current compared to the voltage. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **KWT** represents Kilowatt. Model:'https://schema.org/Number'. Units:'Kilowatt'."
        },
        "reactivePower": {
          "type": "number",
          "minimum": 0,
          "description": "Property. Reactive Power used by circuits. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **K5** represents kilovolt-ampere-reactive. Model:'https://schema.org/Number'. Units:'kilovolt-ampere-reactive'."
        },
        "current": {
          "type": "number",
          "description": "Property. Current. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **AMP** represents Ampere. Model:'https://schema.org/Number'. Units:'Ampere'. "
        },
        "openCircuitVoltage": {
          "type": "number",
          "description": "Property. The Open Circuit Voltage (Code OCV) expressed in Volt is the difference of electrical potential between two terminals of a device when disconnected from any circuit. There is no external load connected and No external electric current flows between the terminals. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **VLT** represents Volt. Model:'https://schema.org/Number'. Units:'Volt'."
        },
        "inverterStatus": {
          "type": "array",
          "description": "Property. Status of the inverter. A combination of values. Enum:'00-Onsector, 01-PowerFailure/OnBattery, 02-LossCommunication, 03-BatteryFault, 04-SystemShutDown, 05-TensionDip, 06-OverVoltage, 07-VoltageDrop, 08-VoltageIncrease, 09-LineNoise, 10-FrequencyVariation, 11-TransientDistortion, 12-HarmonicDistortion'",
          "items": {
            "type": "string",
            "enum": [
              "00-OnSector",
              "01-PowerFailure/OnBattery",
              "02-LossCommunication",
              "03-BatteryFault",
              "04-SystemShutDown",
              "05-TensionDip",
              "06-OverVoltage",
              "07-VoltageDrop",
              "08-VoltageIncrease",
              "09-LineNoise",
              "10-FrequencyVariation",
              "11-TransientDistortion",
              "12-HarmonicDistortion"
            ]
          }
        }
      }
    }
  ],
  "required": [
    "id",
    "type",
    "location",
    "dateObserved",
    "stateOfCharge"
  ]
}