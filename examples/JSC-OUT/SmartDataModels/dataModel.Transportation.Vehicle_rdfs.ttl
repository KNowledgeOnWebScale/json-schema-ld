@prefix schema: <https://schema.org/>.
@prefix skos: <http://www.w3.org/2004/02/skos/core#>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix foaf: <http://xmlns.com/foaf/0.1/>.
@prefix xsd: <http://www.w3.org/2001/XMLSchema#>.
@prefix dcterms: <http://purl.org/dc/terms/>.
@prefix owl: <http://www.w3.org/2002/07/owl#>.
@prefix jsonsc: <https://www.w3.org/2019/wot/json-schema#>.
@prefix jsonsc-ld: <http://w3id.org/jsonsc-ld/>.
@prefix api: <http://purl.org/linked-data/api/vocab>.
@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#>.
@prefix mobivoc: <http://schema.mobivoc.org/#>.
@prefix geosparql: <http://www.opengis.net/ont/geosparql#>.
@prefix sdm: <https://w3id.org/sdm#>.

<https://smart-data-models.github.io/dataModel.Transportation/Vehicle/schema.json> dcterms:title "Smart Data Models - Vehicle";
    dcterms:description "This entity models a particular vehicle model, including all properties which are common to multiple vehicle instances belonging to such model.".
sdm:type dcterms:description "Property. NGSI Entity type. It has to be Vehicle";
    rdf:type rdf:Property;
    rdfs:label "type";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Transportation/Vehicle/schema.json>.
sdm:Type rdf:type skos:ConceptScheme.
sdm:type rdfs:range [
  owl:oneOf (sdm:Vehicle)
].
sdm:Vehicle rdf:type skos:Concept;
    skos:inScheme sdm:Type;
    rdfs:label "Vehicle".
sdm:vehicleType dcterms:description "Property. Type of vehicle from the point of view of its structural characteristics. This is different than the vehicle category . Model:'https://schema.org/Text'. Enum:'agriculturalVehicle, anyVehicle, articulatedVehicle, bicycle, binTrolley, bus, car, caravan, carOrLightVehicle, carWithCaravan, carWithTrailer, cleaningTrolley, constructionOrMaintenanceVehicle, fourWheelDrive, highSidedVehicle, lorry, minibus, moped, motorcycle, motorcycleWithSideCar, motorscooter, sweepingMachine, tanker, threeWheeledVehicle, trailer, tram, twoWheeledVehicle, trolley, van, vehicleWithoutCatalyticConverter, vehicleWithCaravan, vehicleWithTrailer, withEvenNumberedRegistrationPlates, withOddNumberedRegistrationPlates, other'. The following values defined by _VehicleTypeEnum_ and _VehicleTypeEnum2_, [DATEX 2 version 2.3](http://d2docs.ndwcloud.nu/_static/umlmodel/v2.3/index.htm) and extended for other uses";
    rdf:type rdf:Property;
    rdfs:label "vehicleType";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Transportation/Vehicle/schema.json>.
sdm:VehicleType rdf:type skos:ConceptScheme.
sdm:vehicleType rdfs:range [
  owl:oneOf (sdm:agriculturalVehicle sdm:ambulance sdm:anyVehicle sdm:articulatedVehicle sdm:autorickshaw sdm:bicycle sdm:binTrolley sdm:BRT mini bus· sdm:BRT bus sdm:bus sdm:car sdm:caravan sdm:carOrLightVehicle sdm:carWithCaravan sdm:carWithTrailer sdm:cleaningTrolley sdm:compactor sdm:constructionOrMaintenanceVehicle sdm:dumper sdm:e-moped sdm:e-scooter sdm:e-motorcycle sdm:fireTender sdm:fourWheelDrive sdm:highSidedVehicle sdm:hopper sdm:lorry sdm:minibus sdm:moped sdm:motorcycle sdm:motorcycleWithSideCar sdm:motorscooter sdm:policeVan sdm:publicMotor sdm:sweepingMachine sdm:tanker sdm:tempo sdm:threeWheeledVehicle sdm:tipper sdm:trailer sdm:tram sdm:trolley sdm:twoWheeledVehicle sdm:van sdm:vehicleWithoutCatalyticConverter sdm:vehicleWithCaravan sdm:vehicleWithTrailer sdm:withEvenNumberedRegistrationPlates sdm:withOddNumberedRegistrationPlates sdm:other)
].
sdm:agriculturalVehicle rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "agriculturalVehicle".
sdm:ambulance rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "ambulance".
sdm:anyVehicle rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "anyVehicle".
sdm:articulatedVehicle rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "articulatedVehicle".
sdm:autorickshaw rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "autorickshaw".
sdm:bicycle rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "bicycle".
sdm:binTrolley rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "binTrolley".
sdm:BRT mini bus· rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "BRT mini bus·".
sdm:BRT bus rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "BRT bus".
sdm:bus rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "bus".
sdm:car rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "car".
sdm:caravan rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "caravan".
sdm:carOrLightVehicle rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "carOrLightVehicle".
sdm:carWithCaravan rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "carWithCaravan".
sdm:carWithTrailer rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "carWithTrailer".
sdm:cleaningTrolley rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "cleaningTrolley".
sdm:compactor rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "compactor".
sdm:constructionOrMaintenanceVehicle rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "constructionOrMaintenanceVehicle".
sdm:dumper rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "dumper".
sdm:e-moped rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "e-moped".
sdm:e-scooter rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "e-scooter".
sdm:e-motorcycle rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "e-motorcycle".
sdm:fireTender rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "fireTender".
sdm:fourWheelDrive rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "fourWheelDrive".
sdm:highSidedVehicle rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "highSidedVehicle".
sdm:hopper rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "hopper".
sdm:lorry rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "lorry".
sdm:minibus rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "minibus".
sdm:moped rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "moped".
sdm:motorcycle rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "motorcycle".
sdm:motorcycleWithSideCar rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "motorcycleWithSideCar".
sdm:motorscooter rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "motorscooter".
sdm:policeVan rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "policeVan".
sdm:publicMotor rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "publicMotor".
sdm:sweepingMachine rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "sweepingMachine".
sdm:tanker rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "tanker".
sdm:tempo rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "tempo".
sdm:threeWheeledVehicle rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "threeWheeledVehicle".
sdm:tipper rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "tipper".
sdm:trailer rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "trailer".
sdm:tram rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "tram".
sdm:trolley rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "trolley".
sdm:twoWheeledVehicle rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "twoWheeledVehicle".
sdm:van rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "van".
sdm:vehicleWithoutCatalyticConverter rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "vehicleWithoutCatalyticConverter".
sdm:vehicleWithCaravan rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "vehicleWithCaravan".
sdm:vehicleWithTrailer rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "vehicleWithTrailer".
sdm:withEvenNumberedRegistrationPlates rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "withEvenNumberedRegistrationPlates".
sdm:withOddNumberedRegistrationPlates rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "withOddNumberedRegistrationPlates".
sdm:other rdf:type skos:Concept;
    skos:inScheme sdm:VehicleType;
    rdfs:label "other".
sdm:category rdf:type rdf:Property;
    rdfs:label "category";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Transportation/Vehicle/schema.json>.
sdm:Category rdf:type skos:ConceptScheme.
sdm:category rdfs:range [
  owl:oneOf (sdm:municipalServices sdm:nonTracked sdm:private sdm:public sdm:specialUsage sdm:tracked)
].
sdm:municipalServices rdf:type skos:Concept;
    skos:inScheme sdm:Category;
    rdfs:label "municipalServices".
sdm:nonTracked rdf:type skos:Concept;
    skos:inScheme sdm:Category;
    rdfs:label "nonTracked".
sdm:private rdf:type skos:Concept;
    skos:inScheme sdm:Category;
    rdfs:label "private".
sdm:public rdf:type skos:Concept;
    skos:inScheme sdm:Category;
    rdfs:label "public".
sdm:specialUsage rdf:type skos:Concept;
    skos:inScheme sdm:Category;
    rdfs:label "specialUsage".
sdm:tracked rdf:type skos:Concept;
    skos:inScheme sdm:Category;
    rdfs:label "tracked".
sdm:speed dcterms:description "Property. Denotes the magnitude of the horizontal component of the vehicle's current velocity and is specified in Kilometers per Hour. If provided, the value of the speed attribute must be a non-negative real number. `-1` MAY be used if speed is transiently unknown for some reason. Model:'https://schema.org/Number'. Units:'Km/h'";
    rdf:type rdf:Property;
    rdfs:label "speed";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Transportation/Vehicle/schema.json>.
sdm:heading dcterms:description "Property. Denotes the direction of travel of the vehicle and is specified in decimal degrees, where 0 <= `heading` < 360, counting clockwise relative to the true north. If the vehicle is stationary (i.e. the value of the `speed` attribute is `0`), then the value of the heading attribute must be equal to `-1`. Model:'https://schema.org/Number'. Units:'Degree'";
    rdf:type rdf:Property;
    rdfs:label "heading";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Transportation/Vehicle/schema.json>.
sdm:cargoWeight dcterms:description "Property. Current weight of the vehicle's cargo. Model:'https://schema.org/Number'. Units:'Kilograms'";
    rdf:type rdf:Property;
    rdfs:label "cargoWeight";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Transportation/Vehicle/schema.json>;
    rdfs:range xsd:decimal.
sdm:vehicleIdentificationNumber dcterms:description "Property. The Vehicle Identification Number (VIN) is a unique serial number used by the automotive industry to identify individual motor vehicles. Model:'https://schema.org/vehicleIdentificationNumber'.";
    rdf:type rdf:Property;
    rdfs:label "vehicleIdentificationNumber";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Transportation/Vehicle/schema.json>;
    rdfs:range xsd:string.
sdm:vehiclePlateIdentifier dcterms:description "Property.  An identifier or code displayed on a vehicle registration plate attached to the vehicle used for official identification purposes. The registration identifier is numeric or alphanumeric and is unique within the issuing authority's region. Model:'https://schema.org/Text'. Normative References: DATEXII `vehicleRegistrationPlateIdentifier`";
    rdf:type rdf:Property;
    rdfs:label "vehiclePlateIdentifier";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Transportation/Vehicle/schema.json>;
    rdfs:range xsd:string.
sdm:fleetVehicleId dcterms:description "Property. The identifier of the vehicle in the context of the fleet of vehicles to which it belongs. Model:'https://schema.org/Text'.";
    rdf:type rdf:Property;
    rdfs:label "fleetVehicleId";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Transportation/Vehicle/schema.json>;
    rdfs:range xsd:string.
sdm:dateVehicleFirstRegistered dcterms:description "Property. The date of the first registration of the vehicle with the respective public authorities. Model:'https://schema.org/dateVehicleFirstRegistered'.";
    rdf:type rdf:Property;
    rdfs:label "dateVehicleFirstRegistered";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Transportation/Vehicle/schema.json>;
    rdfs:range xsd:date.
sdm:dateFirstUsed dcterms:description "Property. Timestamp which denotes when the vehicle was first used. Model:'https://schema.org/DateTime'.";
    rdf:type rdf:Property;
    rdfs:label "dateFirstUsed";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Transportation/Vehicle/schema.json>;
    rdfs:range xsd:date.
sdm:purchaseDate dcterms:description "Property. The date the item e.g. vehicle was purchased by the current owner. Model:'https://schema.org/purchaseDate'.";
    rdf:type rdf:Property;
    rdfs:label "purchaseDate";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Transportation/Vehicle/schema.json>;
    rdfs:range xsd:dateTime.
sdm:mileageFromOdometer dcterms:description "Property. The total distance travelled by the particular vehicle since its initial production, as read from its odometer. Model:'https://schema.org/mileageFromOdometer'.";
    rdf:type rdf:Property;
    rdfs:label "mileageFromOdometer";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Transportation/Vehicle/schema.json>;
    rdfs:range xsd:decimal.
sdm:vehicleConfiguration dcterms:description "Property. A short text indicating the configuration of the vehicle, e.g. '5dr hatchback ST 2.5 MT 225 hp' or 'limited edition'. Model:'https://schema.org/vehicleConfiguration'.";
    rdf:type rdf:Property;
    rdfs:label "vehicleConfiguration";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Transportation/Vehicle/schema.json>;
    rdfs:range xsd:string.
sdm:feature rdf:type rdf:Property;
    rdfs:label "feature";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Transportation/Vehicle/schema.json>.
sdm:Feature rdf:type skos:ConceptScheme.
sdm:feature rdfs:range [
  owl:oneOf (sdm:abs sdm:airbag sdm:alarm sdm:backCamera sdm:disabledRamp sdm:gps sdm:internetConnection sdm:overspeed sdm:proximitySensor sdm:wifi)
].
sdm:abs rdf:type skos:Concept;
    skos:inScheme sdm:Feature;
    rdfs:label "abs".
sdm:airbag rdf:type skos:Concept;
    skos:inScheme sdm:Feature;
    rdfs:label "airbag".
sdm:alarm rdf:type skos:Concept;
    skos:inScheme sdm:Feature;
    rdfs:label "alarm".
sdm:backCamera rdf:type skos:Concept;
    skos:inScheme sdm:Feature;
    rdfs:label "backCamera".
sdm:disabledRamp rdf:type skos:Concept;
    skos:inScheme sdm:Feature;
    rdfs:label "disabledRamp".
sdm:gps rdf:type skos:Concept;
    skos:inScheme sdm:Feature;
    rdfs:label "gps".
sdm:internetConnection rdf:type skos:Concept;
    skos:inScheme sdm:Feature;
    rdfs:label "internetConnection".
sdm:overspeed rdf:type skos:Concept;
    skos:inScheme sdm:Feature;
    rdfs:label "overspeed".
sdm:proximitySensor rdf:type skos:Concept;
    skos:inScheme sdm:Feature;
    rdfs:label "proximitySensor".
sdm:wifi rdf:type skos:Concept;
    skos:inScheme sdm:Feature;
    rdfs:label "wifi".
sdm:serviceProvided rdf:type rdf:Property;
    rdfs:label "serviceProvided";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Transportation/Vehicle/schema.json>.
sdm:ServiceProvided rdf:type skos:ConceptScheme.
sdm:serviceProvided rdfs:range [
  owl:oneOf (sdm:auxiliaryServices sdm:cargoTransport sdm:construction sdm:fairground sdm:garbageCollection sdm:goodsSelling sdm:maintenance sdm:parksAndGardens sdm:roadSignalling sdm:specialTransport sdm:streetCleaning sdm:streetLighting sdm:urbanTransit sdm:wasteContainerCleaning)
].
sdm:auxiliaryServices rdf:type skos:Concept;
    skos:inScheme sdm:ServiceProvided;
    rdfs:label "auxiliaryServices".
sdm:cargoTransport rdf:type skos:Concept;
    skos:inScheme sdm:ServiceProvided;
    rdfs:label "cargoTransport".
sdm:construction rdf:type skos:Concept;
    skos:inScheme sdm:ServiceProvided;
    rdfs:label "construction".
sdm:fairground rdf:type skos:Concept;
    skos:inScheme sdm:ServiceProvided;
    rdfs:label "fairground".
sdm:garbageCollection rdf:type skos:Concept;
    skos:inScheme sdm:ServiceProvided;
    rdfs:label "garbageCollection".
sdm:goodsSelling rdf:type skos:Concept;
    skos:inScheme sdm:ServiceProvided;
    rdfs:label "goodsSelling".
sdm:maintenance rdf:type skos:Concept;
    skos:inScheme sdm:ServiceProvided;
    rdfs:label "maintenance".
sdm:parksAndGardens rdf:type skos:Concept;
    skos:inScheme sdm:ServiceProvided;
    rdfs:label "parksAndGardens".
sdm:roadSignalling rdf:type skos:Concept;
    skos:inScheme sdm:ServiceProvided;
    rdfs:label "roadSignalling".
sdm:specialTransport rdf:type skos:Concept;
    skos:inScheme sdm:ServiceProvided;
    rdfs:label "specialTransport".
sdm:streetCleaning rdf:type skos:Concept;
    skos:inScheme sdm:ServiceProvided;
    rdfs:label "streetCleaning".
sdm:streetLighting rdf:type skos:Concept;
    skos:inScheme sdm:ServiceProvided;
    rdfs:label "streetLighting".
sdm:urbanTransit rdf:type skos:Concept;
    skos:inScheme sdm:ServiceProvided;
    rdfs:label "urbanTransit".
sdm:wasteContainerCleaning rdf:type skos:Concept;
    skos:inScheme sdm:ServiceProvided;
    rdfs:label "wasteContainerCleaning".
sdm:vehicleSpecialUsage dcterms:description "Property. Indicates whether the vehicle is been used for special purposes, like commercial rental, driving school, or as a taxi. The legislation in many countries requires this information to be revealed when offering a car for sale. Model:'https://schema.org/vehicleSpecialUsage'. Enum:'ambulance, fireBrigade, military, police, schoolTransportation, taxi, trashManagement'";
    rdf:type rdf:Property;
    rdfs:label "vehicleSpecialUsage";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Transportation/Vehicle/schema.json>.
sdm:VehicleSpecialUsage rdf:type skos:ConceptScheme.
sdm:vehicleSpecialUsage rdfs:range [
  owl:oneOf (sdm:ambulance sdm:fireBrigade sdm:military sdm:police sdm:schoolTransportation sdm:taxi sdm:trashManagement)
].
sdm:ambulance rdf:type skos:Concept;
    skos:inScheme sdm:VehicleSpecialUsage;
    rdfs:label "ambulance".
sdm:fireBrigade rdf:type skos:Concept;
    skos:inScheme sdm:VehicleSpecialUsage;
    rdfs:label "fireBrigade".
sdm:military rdf:type skos:Concept;
    skos:inScheme sdm:VehicleSpecialUsage;
    rdfs:label "military".
sdm:police rdf:type skos:Concept;
    skos:inScheme sdm:VehicleSpecialUsage;
    rdfs:label "police".
sdm:schoolTransportation rdf:type skos:Concept;
    skos:inScheme sdm:VehicleSpecialUsage;
    rdfs:label "schoolTransportation".
sdm:taxi rdf:type skos:Concept;
    skos:inScheme sdm:VehicleSpecialUsage;
    rdfs:label "taxi".
sdm:trashManagement rdf:type skos:Concept;
    skos:inScheme sdm:VehicleSpecialUsage;
    rdfs:label "trashManagement".
sdm:refVehicleModel dcterms:description "Relationship. Model:'https://schema.org/URL'. Reference to a VehicleModel";
    rdf:type rdf:Property;
    rdfs:label "refVehicleModel";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Transportation/Vehicle/schema.json>.
sdm:serviceStatus dcterms:description "Property. Vehicle status (from the point of view of the service provided, so it could not apply to private vehicles). Model:'https://schema.org/DateTime'. `parked` : Vehicle is parked and not providing any service at the moment. `onRoute` : Vehicle is performing a mission. A comma-separated modifier(s) can be added to indicate what mission is currently delivering the vehicle. For instance `onRoute,garbageCollection` can be used to denote that the vehicle is on route and in a garbage collection mission. 'broken' : Vehicle is suffering a temporary breakdown. `outOfService` : Vehicle is on the road but not performing any mission, probably going to its parking area. Enum:'broken, onRoute, outOfService, parked'";
    rdf:type rdf:Property;
    rdfs:label "serviceStatus";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Transportation/Vehicle/schema.json>.
sdm:ServiceStatus rdf:type skos:ConceptScheme.
sdm:serviceStatus rdfs:range [
  owl:oneOf (sdm:broken sdm:onRoute sdm:outOfService sdm:parked)
].
sdm:broken rdf:type skos:Concept;
    skos:inScheme sdm:ServiceStatus;
    rdfs:label "broken".
sdm:onRoute rdf:type skos:Concept;
    skos:inScheme sdm:ServiceStatus;
    rdfs:label "onRoute".
sdm:outOfService rdf:type skos:Concept;
    skos:inScheme sdm:ServiceStatus;
    rdfs:label "outOfService".
sdm:parked rdf:type skos:Concept;
    skos:inScheme sdm:ServiceStatus;
    rdfs:label "parked".
sdm:bearing dcterms:description "Property. Model:'https://schema.org/Number'. Gives the vehicle GPS angle measured in a clockwise direction from the True North. SameAs 'bearing' field from GTFS Realtime message-Position(https://developers.google.com/transit/gtfs-realtime/reference#message-position)";
    rdf:type rdf:Property;
    rdfs:label "bearing";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Transportation/Vehicle/schema.json>;
    rdfs:range xsd:decimal.
sdm:wardId dcterms:description "Property. Model:'https://schema.org/Text'. Ward ID of the entity corresponding to this observation.";
    rdf:type rdf:Property;
    rdfs:label "wardId";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Transportation/Vehicle/schema.json>;
    rdfs:range xsd:string.
sdm:tripNetWeightCollected dcterms:description "Property. Model:'https://schema.org/Number'. The net weight collected by the vehicle corresponding to this observation at the end of the trip.";
    rdf:type rdf:Property;
    rdfs:label "tripNetWeightCollected";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Transportation/Vehicle/schema.json>;
    rdfs:range xsd:decimal.
sdm:license_plate dcterms:description "Property. Model:'https://schema.org/Text'. Gives the License Plate number of the vehicle. SameAs: license_plate field from GTFS Realtime message-VehicleDescriptor (https://developers.google.com/transit/gtfs-realtime/reference#message-vehicledescriptor)'";
    rdf:type rdf:Property;
    rdfs:label "license_plate";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Transportation/Vehicle/schema.json>;
    rdfs:range xsd:string.
sdm:deviceBatteryStatus dcterms:description "Property. Model:'https://schema.org/Text'. Gives the Battery charging status of the reporting device. Enum:'connected, disconnected'.";
    rdf:type rdf:Property;
    rdfs:label "deviceBatteryStatus";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Transportation/Vehicle/schema.json>.
sdm:DeviceBatteryStatus rdf:type skos:ConceptScheme.
sdm:deviceBatteryStatus rdfs:range [
  owl:oneOf (sdm:connected sdm:disconnected)
].
sdm:connected rdf:type skos:Concept;
    skos:inScheme sdm:DeviceBatteryStatus;
    rdfs:label "connected".
sdm:disconnected rdf:type skos:Concept;
    skos:inScheme sdm:DeviceBatteryStatus;
    rdfs:label "disconnected".
sdm:ignitionStatus dcterms:description "Property. Model:'https://schema.org/Boolean'. Gives the ignition status of the vehicle. True means ignited";
    rdf:type rdf:Property;
    rdfs:label "ignitionStatus";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Transportation/Vehicle/schema.json>;
    rdfs:range xsd:boolean.
sdm:vehicleRunningStatus dcterms:description "Property. Model:'https://schema.org/Text'. Gives the Battery charging status of the reporting device. Enum:'running, waiting, stopped'.";
    rdf:type rdf:Property;
    rdfs:label "vehicleRunningStatus";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Transportation/Vehicle/schema.json>.
sdm:VehicleRunningStatus rdf:type skos:ConceptScheme.
sdm:vehicleRunningStatus rdfs:range [
  owl:oneOf (sdm:running sdm:stopped sdm:waiting)
].
sdm:running rdf:type skos:Concept;
    skos:inScheme sdm:VehicleRunningStatus;
    rdfs:label "running".
sdm:stopped rdf:type skos:Concept;
    skos:inScheme sdm:VehicleRunningStatus;
    rdfs:label "stopped".
sdm:waiting rdf:type skos:Concept;
    skos:inScheme sdm:VehicleRunningStatus;
    rdfs:label "waiting".
sdm:currentTripCount dcterms:description "Property. Model:'https://schema.org/Number'. The current count of trips made by the vehicle corresponding to this observation on the given day of operation.";
    rdf:type rdf:Property;
    rdfs:label "currentTripCount";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Transportation/Vehicle/schema.json>;
    rdfs:range xsd:decimal.
sdm:zoneName dcterms:description "Property. Model:'https://schema.org/Text'. Zone name of the entity corresponding to this observation";
    rdf:type rdf:Property;
    rdfs:label "zoneName";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Transportation/Vehicle/schema.json>;
    rdfs:range xsd:string.
sdm:vehicleAltitude dcterms:description "Property. Model:'https://schema.org/Text'. Gives the current altitude of the vehicle using GPS";
    rdf:type rdf:Property;
    rdfs:label "vehicleAltitude";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Transportation/Vehicle/schema.json>;
    rdfs:range xsd:string.
sdm:observationDateTime dcterms:description "Property. Model:'https://schema.org/DateTime'. Last reported time of observation";
    rdf:type rdf:Property;
    rdfs:label "observationDateTime";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Transportation/Vehicle/schema.json>;
    rdfs:range xsd:dateTime.
sdm:deviceSimNumber dcterms:description "Property. Model:'https://schema.org/Text'. Gives the SIM number of the device in the vehicle.";
    rdf:type rdf:Property;
    rdfs:label "deviceSimNumber";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Transportation/Vehicle/schema.json>;
    rdfs:range xsd:string.
sdm:wardName dcterms:description "Property. Model:'https://schema.org/Text'. Ward name of the entity corresponding to this observation.";
    rdf:type rdf:Property;
    rdfs:label "wardName";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Transportation/Vehicle/schema.json>;
    rdfs:range xsd:string.
sdm:reportId dcterms:description "Property. Model:'https://schema.org/Text'. Unique Id assigned for the issue or report or feedback or transaction corresponding to this observation.";
    rdf:type rdf:Property;
    rdfs:label "reportId";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Transportation/Vehicle/schema.json>;
    rdfs:range xsd:string.
sdm:vehicleTrackerDevice dcterms:description "Property. Model:'https://schema.org/Text'. Installation status of the GPS device or the tracking device fitted to the vehicle corresponding to this observation.";
    rdf:type rdf:Property;
    rdfs:label "vehicleTrackerDevice";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Transportation/Vehicle/schema.json>;
    rdfs:range xsd:string.
sdm:fuelFilled dcterms:description "Property. Model:'https://schema.org/Number'. Amount of fuel filled in liters to the vehicle corresponding to this observation.";
    rdf:type rdf:Property;
    rdfs:label "fuelFilled";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Transportation/Vehicle/schema.json>;
    rdfs:range xsd:decimal.
sdm:fuelEfficiency dcterms:description "Property. Model:'https://schema.org/Number'. The distance traveled per unit of fuel used, commonly in kilometers per liter (km/L).";
    rdf:type rdf:Property;
    rdfs:label "fuelEfficiency";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Transportation/Vehicle/schema.json>;
    rdfs:range xsd:decimal.
sdm:fuelType dcterms:description "Property. Model:'https://schema.org/Text'. The type of fuel suitable for the engine or engines of the vehicle corresponding to this observation.";
    rdf:type rdf:Property;
    rdfs:label "fuelType";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Transportation/Vehicle/schema.json>;
    rdfs:range xsd:string.
sdm:serviceOnDuty dcterms:description "Property. Model:'https://schema.org/Boolean'. Nature of service provided by emergency vehicle corresponding to this observation. True indicates the emergency vehicle corresponding to this observation is attending to/ servicing to an emergency call of duty and is False otherwise.";
    rdf:type rdf:Property;
    rdfs:label "serviceOnDuty";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Transportation/Vehicle/schema.json>;
    rdfs:range xsd:string.
sdm:emergencyVehicleType dcterms:description "Property. Model:'https://schema.org/Text'. Type of emergency vehicle corresponding to this observation. Enum:'policeCar, policeMotorcycle, policeVan, policeSWAT, fireEngine, waterTender, airAmbulance, ambulance, motorcycleAmbulance, rescueVehicle, hazardousMaterialsApparatus, towTruck";
    rdf:type rdf:Property;
    rdfs:label "emergencyVehicleType";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Transportation/Vehicle/schema.json>.
sdm:EmergencyVehicleType rdf:type skos:ConceptScheme.
sdm:emergencyVehicleType rdfs:range [
  owl:oneOf (sdm:policeCar sdm:policeMotorcycle sdm:policeVan sdm:policeSWAT sdm:fireEngine sdm:waterTender sdm:airAmbulance sdm:ambulance sdm:motorcycleAmbulance sdm:rescueVehicle sdm:hazardousMaterialsApparatus sdm:towTruck)
].
sdm:policeCar rdf:type skos:Concept;
    skos:inScheme sdm:EmergencyVehicleType;
    rdfs:label "policeCar".
sdm:policeMotorcycle rdf:type skos:Concept;
    skos:inScheme sdm:EmergencyVehicleType;
    rdfs:label "policeMotorcycle".
sdm:policeVan rdf:type skos:Concept;
    skos:inScheme sdm:EmergencyVehicleType;
    rdfs:label "policeVan".
sdm:policeSWAT rdf:type skos:Concept;
    skos:inScheme sdm:EmergencyVehicleType;
    rdfs:label "policeSWAT".
sdm:fireEngine rdf:type skos:Concept;
    skos:inScheme sdm:EmergencyVehicleType;
    rdfs:label "fireEngine".
sdm:waterTender rdf:type skos:Concept;
    skos:inScheme sdm:EmergencyVehicleType;
    rdfs:label "waterTender".
sdm:airAmbulance rdf:type skos:Concept;
    skos:inScheme sdm:EmergencyVehicleType;
    rdfs:label "airAmbulance".
sdm:ambulance rdf:type skos:Concept;
    skos:inScheme sdm:EmergencyVehicleType;
    rdfs:label "ambulance".
sdm:motorcycleAmbulance rdf:type skos:Concept;
    skos:inScheme sdm:EmergencyVehicleType;
    rdfs:label "motorcycleAmbulance".
sdm:rescueVehicle rdf:type skos:Concept;
    skos:inScheme sdm:EmergencyVehicleType;
    rdfs:label "rescueVehicle".
sdm:hazardousMaterialsApparatus rdf:type skos:Concept;
    skos:inScheme sdm:EmergencyVehicleType;
    rdfs:label "hazardousMaterialsApparatus".
sdm:towTruck rdf:type skos:Concept;
    skos:inScheme sdm:EmergencyVehicleType;
    rdfs:label "towTruck".
sdm:municipalityInfo dcterms:description "Property. Model:'https://schema.org/Text. Municipality information corresponding to this observation.";
    rdf:type rdf:Property;
    rdfs:label "municipalityInfo";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Transportation/Vehicle/schema.json>;
    rdfs:range sdm:MunicipalityInfo.
sdm:MunicipalityInfo rdf:type rdfs:Class;
    rdfs:label "MunicipalityInfo".
sdm:district dcterms:description "Property. Model:'https://schema.org/Text'. District name corresponding to this observation.";
    rdf:type rdf:Property;
    rdfs:label "district";
    rdfs:domain sdm:MunicipalityInfo;
    rdfs:range xsd:string.
sdm:ulbName dcterms:description "Property. Model:'https://schema.org/Text'. Name of the Urban Local Body corresponding to this observation.";
    rdf:type rdf:Property;
    rdfs:label "ulbName";
    rdfs:domain sdm:MunicipalityInfo;
    rdfs:range xsd:string.
sdm:cityId dcterms:description "Property. Model:'https://schema.org/Text'. City ID corresponding to this observation.";
    rdf:type rdf:Property;
    rdfs:label "cityId";
    rdfs:domain sdm:MunicipalityInfo;
    rdfs:range xsd:string.
sdm:wardId dcterms:description "Property. Model:'https://schema.org/Text'. Ward ID corresponding to this observation.";
    rdf:type rdf:Property;
    rdfs:label "wardId";
    rdfs:domain sdm:MunicipalityInfo;
    rdfs:range xsd:string.
sdm:stateName dcterms:description "Property. Model:'https://schema.org/Text'. Name of the state corresponding to this observation.";
    rdf:type rdf:Property;
    rdfs:label "stateName";
    rdfs:domain sdm:MunicipalityInfo;
    rdfs:range xsd:string.
sdm:cityName dcterms:description "Property. Model:'https://schema.org/Text'. City name corresponding to this observation";
    rdf:type rdf:Property;
    rdfs:label "cityName";
    rdfs:domain sdm:MunicipalityInfo;
    rdfs:range xsd:string.
sdm:zoneName dcterms:description "Property. Model:'https://schema.org/Text'. Zone name corresponding to this observation.";
    rdf:type rdf:Property;
    rdfs:label "zoneName";
    rdfs:domain sdm:MunicipalityInfo;
    rdfs:range xsd:string.
sdm:zoneId dcterms:description "Property. Model:'https://schema.org/Text'. Zone ID corresponding to this observation.";
    rdf:type rdf:Property;
    rdfs:label "zoneId";
    rdfs:domain sdm:MunicipalityInfo;
    rdfs:range xsd:string.
sdm:wardName dcterms:description "Property. Model:'https://schema.org/Text'. Ward name corresponding to this observation.";
    rdf:type rdf:Property;
    rdfs:label "wardName";
    rdfs:domain sdm:MunicipalityInfo;
    rdfs:range xsd:string.
sdm:wardNum dcterms:description "Property. Model:'https://schema.org/Number'. Ward number corresponding to this observation.";
    rdf:type rdf:Property;
    rdfs:label "wardNum";
    rdfs:domain sdm:MunicipalityInfo;
    rdfs:range xsd:decimal.
