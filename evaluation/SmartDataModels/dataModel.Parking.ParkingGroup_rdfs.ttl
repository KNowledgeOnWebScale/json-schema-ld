@prefix schema: <https://schema.org/>.
@prefix skos: <http://www.w3.org/2004/02/skos/core#>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix foaf: <http://xmlns.com/foaf/0.1/>.
@prefix xsd: <http://www.w3.org/2001/XMLSchema#>.
@prefix dcterms: <http://purl.org/dc/terms/>.
@prefix owl: <http://www.w3.org/2002/07/owl#>.
@prefix jsonsc: <https://www.w3.org/2019/wot/json-schema#>.
@prefix jsonsc-ld: <http://w3id.org/jsonsc-ld/>.
@prefix api: <http://purl.org/linked-data/api/vocab>.
@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#>.
@prefix mobivoc: <http://schema.mobivoc.org/#>.
@prefix geosparql: <http://www.opengis.net/ont/geosparql#>.
@prefix sdm: <https://w3id.org/sdm#>.

<https://smart-data-models.github.io/dataModel.Parking/ParkingGroup/schema.json> dcterms:title "Smart Data Models - Parking / Parking Group";
    dcterms:description "Parking Group ".
sdm:type dcterms:description "Property. NGSI Entity type. It has to be ParkingGroup";
    rdf:type rdf:Property;
    rdfs:label "type";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Parking/ParkingGroup/schema.json>.
sdm:Type rdf:type skos:ConceptScheme.
sdm:type rdfs:range [
  owl:oneOf (sdm:ParkingGroup)
].
sdm:ParkingGroup rdf:type skos:Concept;
    skos:inScheme sdm:Type;
    rdfs:label "ParkingGroup".
sdm:category rdf:type rdf:Property;
    rdfs:label "category";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Parking/ParkingGroup/schema.json>.
sdm:Category rdf:type skos:ConceptScheme.
sdm:category rdfs:range [
  owl:oneOf (sdm:adjacentSpaces sdm:blueZone sdm:completeFloor sdm:free sdm:feeCharged sdm:greenZone sdm:loadUnloadZone sdm:nonAdjacentSpaces sdm:offStreet sdm:onlyDisabled sdm:onlyElectricalCharging sdm:onlyResidents sdm:onlyWithPermit sdm:onStreet sdm:particularConditionsSpaces sdm:shortTermMediumTermLongTerm sdm:statisticsOnly sdm:vehicleTypeSpaces)
].
sdm:adjacentSpaces rdf:type skos:Concept;
    skos:inScheme sdm:Category;
    rdfs:label "adjacentSpaces".
sdm:blueZone rdf:type skos:Concept;
    skos:inScheme sdm:Category;
    rdfs:label "blueZone".
sdm:completeFloor rdf:type skos:Concept;
    skos:inScheme sdm:Category;
    rdfs:label "completeFloor".
sdm:free rdf:type skos:Concept;
    skos:inScheme sdm:Category;
    rdfs:label "free".
sdm:feeCharged rdf:type skos:Concept;
    skos:inScheme sdm:Category;
    rdfs:label "feeCharged".
sdm:greenZone rdf:type skos:Concept;
    skos:inScheme sdm:Category;
    rdfs:label "greenZone".
sdm:loadUnloadZone rdf:type skos:Concept;
    skos:inScheme sdm:Category;
    rdfs:label "loadUnloadZone".
sdm:nonAdjacentSpaces rdf:type skos:Concept;
    skos:inScheme sdm:Category;
    rdfs:label "nonAdjacentSpaces".
sdm:offStreet rdf:type skos:Concept;
    skos:inScheme sdm:Category;
    rdfs:label "offStreet".
sdm:onlyDisabled rdf:type skos:Concept;
    skos:inScheme sdm:Category;
    rdfs:label "onlyDisabled".
sdm:onlyElectricalCharging rdf:type skos:Concept;
    skos:inScheme sdm:Category;
    rdfs:label "onlyElectricalCharging".
sdm:onlyResidents rdf:type skos:Concept;
    skos:inScheme sdm:Category;
    rdfs:label "onlyResidents".
sdm:onlyWithPermit rdf:type skos:Concept;
    skos:inScheme sdm:Category;
    rdfs:label "onlyWithPermit".
sdm:onStreet rdf:type skos:Concept;
    skos:inScheme sdm:Category;
    rdfs:label "onStreet".
sdm:particularConditionsSpaces rdf:type skos:Concept;
    skos:inScheme sdm:Category;
    rdfs:label "particularConditionsSpaces".
sdm:shortTermMediumTermLongTerm rdf:type skos:Concept;
    skos:inScheme sdm:Category;
    rdfs:label "shortTermMediumTermLongTerm".
sdm:statisticsOnly rdf:type skos:Concept;
    skos:inScheme sdm:Category;
    rdfs:label "statisticsOnly".
sdm:vehicleTypeSpaces rdf:type skos:Concept;
    skos:inScheme sdm:Category;
    rdfs:label "vehicleTypeSpaces".
sdm:refParkingSite dcterms:description "Relationship. Parking site to which this zone belongs to. A group cannot be orphan. A group cannot have subgroups. Reference to an OffStreetParking or to an OnStreetParking";
    rdf:type rdf:Property;
    rdfs:label "refParkingSite";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Parking/ParkingGroup/schema.json>.
sdm:allowedVehicleType dcterms:description "Property. Vehicle type allowed (a parking group only allows one vehicle type). Model:'http://schema.org/Text'. Enum:'bicycle, bus, car, caravan, motorcycle, motorscooter, truck' ";
    rdf:type rdf:Property;
    rdfs:label "allowedVehicleType";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Parking/ParkingGroup/schema.json>.
sdm:AllowedVehicleType rdf:type skos:ConceptScheme.
sdm:allowedVehicleType rdfs:range [
  owl:oneOf (sdm:bicycle sdm:bus sdm:car sdm:caravan sdm:motorcycle sdm:motorscooter sdm:truck)
].
sdm:bicycle rdf:type skos:Concept;
    skos:inScheme sdm:AllowedVehicleType;
    rdfs:label "bicycle".
sdm:bus rdf:type skos:Concept;
    skos:inScheme sdm:AllowedVehicleType;
    rdfs:label "bus".
sdm:car rdf:type skos:Concept;
    skos:inScheme sdm:AllowedVehicleType;
    rdfs:label "car".
sdm:caravan rdf:type skos:Concept;
    skos:inScheme sdm:AllowedVehicleType;
    rdfs:label "caravan".
sdm:motorcycle rdf:type skos:Concept;
    skos:inScheme sdm:AllowedVehicleType;
    rdfs:label "motorcycle".
sdm:motorscooter rdf:type skos:Concept;
    skos:inScheme sdm:AllowedVehicleType;
    rdfs:label "motorscooter".
sdm:truck rdf:type skos:Concept;
    skos:inScheme sdm:AllowedVehicleType;
    rdfs:label "truck".
sdm:maximumParkingDuration dcterms:description "Property. Maximum allowed stay encoded as a ISO8601 duration. When non present or equals to the empty string it means indefinite. Applications _SHOULD_ inspect the value of this property at parent's level if it is not defined.";
    rdf:type rdf:Property;
    rdfs:label "maximumParkingDuration";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Parking/ParkingGroup/schema.json>;
    rdfs:range xsd:dateTime.
sdm:chargeType rdf:type rdf:Property;
    rdfs:label "chargeType";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Parking/ParkingGroup/schema.json>.
sdm:ChargeType rdf:type skos:ConceptScheme.
sdm:chargeType rdfs:range [
  owl:oneOf (sdm:additionalIntervalPrice sdm:annualPayment sdm:firstIntervalPrice sdm:flat sdm:free sdm:minimum sdm:maximum sdm:monthlyPayment sdm:seasonTicket sdm:temporaryFee sdm:temporaryPrice sdm:unknown sdm:other)
].
sdm:additionalIntervalPrice rdf:type skos:Concept;
    skos:inScheme sdm:ChargeType;
    rdfs:label "additionalIntervalPrice".
sdm:annualPayment rdf:type skos:Concept;
    skos:inScheme sdm:ChargeType;
    rdfs:label "annualPayment".
sdm:firstIntervalPrice rdf:type skos:Concept;
    skos:inScheme sdm:ChargeType;
    rdfs:label "firstIntervalPrice".
sdm:flat rdf:type skos:Concept;
    skos:inScheme sdm:ChargeType;
    rdfs:label "flat".
sdm:free rdf:type skos:Concept;
    skos:inScheme sdm:ChargeType;
    rdfs:label "free".
sdm:minimum rdf:type skos:Concept;
    skos:inScheme sdm:ChargeType;
    rdfs:label "minimum".
sdm:maximum rdf:type skos:Concept;
    skos:inScheme sdm:ChargeType;
    rdfs:label "maximum".
sdm:monthlyPayment rdf:type skos:Concept;
    skos:inScheme sdm:ChargeType;
    rdfs:label "monthlyPayment".
sdm:seasonTicket rdf:type skos:Concept;
    skos:inScheme sdm:ChargeType;
    rdfs:label "seasonTicket".
sdm:temporaryFee rdf:type skos:Concept;
    skos:inScheme sdm:ChargeType;
    rdfs:label "temporaryFee".
sdm:temporaryPrice rdf:type skos:Concept;
    skos:inScheme sdm:ChargeType;
    rdfs:label "temporaryPrice".
sdm:unknown rdf:type skos:Concept;
    skos:inScheme sdm:ChargeType;
    rdfs:label "unknown".
sdm:other rdf:type skos:Concept;
    skos:inScheme sdm:ChargeType;
    rdfs:label "other".
sdm:requiredPermit rdf:type rdf:Property;
    rdfs:label "requiredPermit";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Parking/ParkingGroup/schema.json>.
sdm:RequiredPermit rdf:type skos:ConceptScheme.
sdm:requiredPermit rdfs:range [
  owl:oneOf (sdm:employeePermit sdm:studentPermit sdm:fairPermit sdm:governmentPermit sdm:residentPermit sdm:specificIdentifiedVehiclePermit sdm:disabledPermit sdm:visitorPermit sdm:blueZonePermit sdm:careTakingPermit sdm:carpoolingPermit sdm:carSharingPermit sdm:emergencyVehiclePermit sdm:maintenanceVehiclePermit sdm:roadWorksPermit sdm:taxiPermit sdm:transportationPermit sdm:noPermitNeeded)
].
sdm:employeePermit rdf:type skos:Concept;
    skos:inScheme sdm:RequiredPermit;
    rdfs:label "employeePermit".
sdm:studentPermit rdf:type skos:Concept;
    skos:inScheme sdm:RequiredPermit;
    rdfs:label "studentPermit".
sdm:fairPermit rdf:type skos:Concept;
    skos:inScheme sdm:RequiredPermit;
    rdfs:label "fairPermit".
sdm:governmentPermit rdf:type skos:Concept;
    skos:inScheme sdm:RequiredPermit;
    rdfs:label "governmentPermit".
sdm:residentPermit rdf:type skos:Concept;
    skos:inScheme sdm:RequiredPermit;
    rdfs:label "residentPermit".
sdm:specificIdentifiedVehiclePermit rdf:type skos:Concept;
    skos:inScheme sdm:RequiredPermit;
    rdfs:label "specificIdentifiedVehiclePermit".
sdm:disabledPermit rdf:type skos:Concept;
    skos:inScheme sdm:RequiredPermit;
    rdfs:label "disabledPermit".
sdm:visitorPermit rdf:type skos:Concept;
    skos:inScheme sdm:RequiredPermit;
    rdfs:label "visitorPermit".
sdm:blueZonePermit rdf:type skos:Concept;
    skos:inScheme sdm:RequiredPermit;
    rdfs:label "blueZonePermit".
sdm:careTakingPermit rdf:type skos:Concept;
    skos:inScheme sdm:RequiredPermit;
    rdfs:label "careTakingPermit".
sdm:carpoolingPermit rdf:type skos:Concept;
    skos:inScheme sdm:RequiredPermit;
    rdfs:label "carpoolingPermit".
sdm:carSharingPermit rdf:type skos:Concept;
    skos:inScheme sdm:RequiredPermit;
    rdfs:label "carSharingPermit".
sdm:emergencyVehiclePermit rdf:type skos:Concept;
    skos:inScheme sdm:RequiredPermit;
    rdfs:label "emergencyVehiclePermit".
sdm:maintenanceVehiclePermit rdf:type skos:Concept;
    skos:inScheme sdm:RequiredPermit;
    rdfs:label "maintenanceVehiclePermit".
sdm:roadWorksPermit rdf:type skos:Concept;
    skos:inScheme sdm:RequiredPermit;
    rdfs:label "roadWorksPermit".
sdm:taxiPermit rdf:type skos:Concept;
    skos:inScheme sdm:RequiredPermit;
    rdfs:label "taxiPermit".
sdm:transportationPermit rdf:type skos:Concept;
    skos:inScheme sdm:RequiredPermit;
    rdfs:label "transportationPermit".
sdm:noPermitNeeded rdf:type skos:Concept;
    skos:inScheme sdm:RequiredPermit;
    rdfs:label "noPermitNeeded".
sdm:permitActiveHours dcterms:description "Property. This attribute allows to capture situations when a permit is only needed at specific hours or days of week. It is an structured value which must contain a subproperty per each required permit, indicating when the permit is active. If nothing specified for a permit it will mean that a permit is always required. Empty object means always active. The syntax must be conformant with schema.org [opening hours specification](https://schema.org/openingHours). For instance, a blue zone which is only active on dayweeks will be encoded as 'blueZonePermit': 'Mo,Tu,We,Th,Fr,Sa 09:00-20:00'. Applications _SHOULD_ inspect the value of this property at parent's level if it is not defined. Model:'https://schema.org/openingHours'";
    rdf:type rdf:Property;
    rdfs:label "permitActiveHours";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Parking/ParkingGroup/schema.json>;
    rdfs:range sdm:PermitActiveHour.
sdm:PermitActiveHour rdf:type rdfs:Class;
    rdfs:label "PermitActiveHour".
sdm:reservationType dcterms:description "Property. Conditions for reservation. Applications _SHOULD_ inspect the value of this property at parent's level if it is not defined. Enum:'mandatory, notAvailable, optional, partly'.";
    rdf:type rdf:Property;
    rdfs:label "reservationType";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Parking/ParkingGroup/schema.json>.
sdm:ReservationType rdf:type skos:ConceptScheme.
sdm:reservationType rdfs:range [
  owl:oneOf (sdm:mandatory sdm:notAvailable sdm:optional sdm:partly)
].
sdm:mandatory rdf:type skos:Concept;
    skos:inScheme sdm:ReservationType;
    rdfs:label "mandatory".
sdm:notAvailable rdf:type skos:Concept;
    skos:inScheme sdm:ReservationType;
    rdfs:label "notAvailable".
sdm:optional rdf:type skos:Concept;
    skos:inScheme sdm:ReservationType;
    rdfs:label "optional".
sdm:partly rdf:type skos:Concept;
    skos:inScheme sdm:ReservationType;
    rdfs:label "partly".
sdm:areBordersMarked dcterms:description "Property. Denotes whether parking spots are delimited (with blank lines or similar) or not. Applications _SHOULD_ inspect the value of this property at parent's level if it is not defined. Model:'https://schema.org/Boolean'";
    rdf:type rdf:Property;
    rdfs:label "areBordersMarked";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Parking/ParkingGroup/schema.json>;
    rdfs:range xsd:boolean.
sdm:totalSpotNumber dcterms:description "Property. Model:'http://schema.org/Number'. The total number of spots pertaining to this group. Allowed values: Any positive integer number or 0. Normative references: DATEX 2 version 2.3 attribute _parkingNumberOfSpaces_ of the _ParkingRecord_ class.";
    rdf:type rdf:Property;
    rdfs:label "totalSpotNumber";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Parking/ParkingGroup/schema.json>;
    rdfs:range xsd:integer.
sdm:availableSpotNumber dcterms:description "Property. Model:'http://schema.org/Number'. The number of spots available in this group. It must lower or equal than `totalSpotNumber`.";
    rdf:type rdf:Property;
    rdfs:label "availableSpotNumber";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Parking/ParkingGroup/schema.json>;
    rdfs:range xsd:integer.
sdm:occupancyDetectionType rdf:type rdf:Property;
    rdfs:label "occupancyDetectionType";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Parking/ParkingGroup/schema.json>.
sdm:OccupancyDetectionType rdf:type skos:ConceptScheme.
sdm:occupancyDetectionType rdfs:range [
  owl:oneOf (sdm:balancing sdm:manual sdm:modelBased sdm:none sdm:singleSpaceDetection)
].
sdm:balancing rdf:type skos:Concept;
    skos:inScheme sdm:OccupancyDetectionType;
    rdfs:label "balancing".
sdm:manual rdf:type skos:Concept;
    skos:inScheme sdm:OccupancyDetectionType;
    rdfs:label "manual".
sdm:modelBased rdf:type skos:Concept;
    skos:inScheme sdm:OccupancyDetectionType;
    rdfs:label "modelBased".
sdm:none rdf:type skos:Concept;
    skos:inScheme sdm:OccupancyDetectionType;
    rdfs:label "none".
sdm:singleSpaceDetection rdf:type skos:Concept;
    skos:inScheme sdm:OccupancyDetectionType;
    rdfs:label "singleSpaceDetection".
sdm:parkingMode rdf:type rdf:Property;
    rdfs:label "parkingMode";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Parking/ParkingGroup/schema.json>.
sdm:ParkingMode rdf:type skos:ConceptScheme.
sdm:parkingMode rdfs:range [
  owl:oneOf (sdm:echelonParking sdm:parallelParking sdm:perpendicularParking)
].
sdm:echelonParking rdf:type skos:Concept;
    skos:inScheme sdm:ParkingMode;
    rdfs:label "echelonParking".
sdm:parallelParking rdf:type skos:Concept;
    skos:inScheme sdm:ParkingMode;
    rdfs:label "parallelParking".
sdm:perpendicularParking rdf:type skos:Concept;
    skos:inScheme sdm:ParkingMode;
    rdfs:label "perpendicularParking".
sdm:averageSpotWidth dcterms:description "Property. Model:'http://schema.org/width'. Units:'meters'. The average width of parking spots. Applications _SHOULD_ inspect the value of this property at parent's level if it is not defined.";
    rdf:type rdf:Property;
    rdfs:label "averageSpotWidth";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Parking/ParkingGroup/schema.json>;
    rdfs:range xsd:decimal.
sdm:averageSpotLength dcterms:description "Property. Model:'http://schema.org/length'. Units:'meters'. The average length of parking spots. Applications _SHOULD_ inspect the value of this property at parent's level if it is not defined.";
    rdf:type rdf:Property;
    rdfs:label "averageSpotLength";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Parking/ParkingGroup/schema.json>;
    rdfs:range xsd:decimal.
sdm:maximumAllowedHeight dcterms:description "Property. Model:'http://schema.org/heigth'. Units:'meters'. Maximum allowed height for vehicles.  Applications _SHOULD_ inspect the value of this property at parent's level if it is not defined.";
    rdf:type rdf:Property;
    rdfs:label "maximumAllowedHeight";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Parking/ParkingGroup/schema.json>;
    rdfs:range xsd:decimal.
sdm:maximumAllowedWidth dcterms:description "Property. Model:'http://schema.org/width'. Units:'Meters'. Maximum allowed width for vehicles. Applications _SHOULD_ inspect the value of this property at parent's level if it is not defined.";
    rdf:type rdf:Property;
    rdfs:label "maximumAllowedWidth";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Parking/ParkingGroup/schema.json>;
    rdfs:range xsd:decimal.
sdm:refParkingSpot dcterms:description "Relationship. Individual parking spots belonging to this parking group.";
    rdf:type rdf:Property;
    rdfs:label "refParkingSpot";
    rdfs:domain <https://smart-data-models.github.io/dataModel.Parking/ParkingGroup/schema.json>.
