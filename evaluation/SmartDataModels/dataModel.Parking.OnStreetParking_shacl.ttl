@prefix dash: <http://datashapes.org/dash#>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix schema: <https://schema.org/>.
@prefix sh: <http://www.w3.org/ns/shacl#>.
@prefix dcterms: <http://purl.org/dc/terms/>.
@prefix xsd: <http://www.w3.org/2001/XMLSchema#>.
@prefix gbfs: <https://w3id.org/gbfs#>.
@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#>.
@prefix mobivoc: <http://schema.mobivoc.org/#>.
@prefix sdm: <https://w3id.org/sdm#>.
@prefix sdmshape: <https://w3id.org/sdm/shapes/schema.json#>.

<https://w3id.org/sdm/shapes/schema.json#schema.jsonShape> rdf:type sh:NodeShape;
    sh:targetClass <https://smart-data-models.github.io/dataModel.Parking/OnStreetParking/schema.json>;
    sh:property [
  sh:path sdm:type;
  sh:description "Property. Entity type. It must be equal to OnStreetParking";
  sh:name "type";
  sh:in (sdm:OnStreetParking);
  sh:minCount 1;
  sh:maxCount 1
], [
  sh:path sdm:category;
  sh:name "category";
  sh:in (sdm:barrierAccess sdm:blueZone sdm:feeCharged sdm:forDisabled sdm:forElectricalCharging sdm:forLoadUnload sdm:forResidents sdm:free sdm:greenZone sdm:mediumTerm sdm:onlyWithPermit sdm:public sdm:shortTerm sdm:taxiStop sdm:underground)
], [
  sh:path sdm:allowedVehicleType;
  sh:name "allowedVehicleType";
  sh:in (sdm:agriculturalVehicle sdm:anyVehicle sdm:articulatedVehicle sdm:bicycle sdm:bus sdm:car sdm:caravan sdm:carOrLightVehicle sdm:carWithCaravan sdm:carWithTrailer sdm:constructionOrMaintenanceVehicle sdm:fourWheelDrive sdm:highSidedVehicle sdm:lorry sdm:moped sdm:motorcycle sdm:motorcycleWithSideCar sdm:motorscooter sdm:tanker sdm:threeWheeledVehicle sdm:trailer sdm:tram sdm:twoWheeledVehicle sdm:van sdm:vehicleWithCatalyticConverter sdm:vehicleWithoutCatalyticConverter sdm:vehicleWithCaravan sdm:vehicleWithTrailer sdm:withEvenNumberedRegistrationPlates sdm:withOddNumberedRegistrationPlates sdm:other)
], [
  sh:path sdm:requiredPermit;
  sh:name "requiredPermit";
  sh:datatype xsd:string
], [
  sh:path sdm:permitActiveHours;
  sh:description "Property. This attribute allows to capture situations when a permit is only needed at specific hours or days of week. It is a structured value which must contain a subproperty per each required permit, indicating when the permit is active. If nothing specified for a permit it will mean that a permit is always required. An empty JSON Object means always active. The syntax must be conformant with schema.org";
  sh:name "permitActiveHours"
].
sdm:PermitActiveHourShape rdf:type sh:NodeShape;
    sh:targetClass sdm:PermitActiveHour;
    sh:property [
  sh:path sdm:maximumParkingDuration;
  sh:description "Property. Maximum allowed stay at site encoded as a ISO8601 duration. An empty value indicates an indefinite duration.";
  sh:name "maximumParkingDuration";
  sh:datatype xsd:dateTime
], [
  sh:path sdm:occupiedSpotNumber;
  sh:description "Property. Model:'https://schema.org/Number'. Number of total parking spots occupied in the smart parking site corresponding to this observation. This must a positive number lower than or equal to the totalSpotNumber.";
  sh:name "occupiedSpotNumber";
  sh:datatype xsd:decimal
], [
  sh:path sdm:occupancyModified;
  sh:description "Property. Model:'https://schema.org/DateTime'. Date last time the occupancy of the parking has being modified";
  sh:name "occupancyModified";
  sh:datatype xsd:dateTime
], [
  sh:path sdm:layout;
  sh:name "layout";
  sh:datatype xsd:string
], [
  sh:path sdm:chargeType;
  sh:name "chargeType";
  sh:in (sdm:additionalIntervalPrice sdm:annualPayment sdm:firstIntervalPrice sdm:flat sdm:free sdm:minimum sdm:maximum sdm:monthlyPayment sdm:seasonTicket sdm:temporaryFee sdm:temporaryPrice sdm:unknown sdm:other)
], [
  sh:path sdm:acceptedPaymentMethod;
  sh:description "Property. Type of charge(s) performed by the parking site. Enum:'ByBankTransferInAdvance, ByInvoice, Cash, CheckInAdvance, COD, DirectDebit, GoogleCheckout, PayPal, PaySwarm'";
  sh:name "acceptedPaymentMethod";
  sh:in (sdm:ByBankTransferInAdvance sdm:ByInvoice sdm:Cash sdm:CheckInAdvance sdm:COD sdm:DirectDebit sdm:GoogleCheckout sdm:PayPal sdm:PaySwarm)
], [
  sh:path sdm:usageScenario;
  sh:description "Property. Type of charge(s) performed by the parking site. Enum:'carSharing, dropOff, kissAndRide, liftShare, loadingBay, overnightParking, parkAndRide, parkAndCycle, parkAndWalk, vehicleLift,'";
  sh:name "usageScenario";
  sh:in (sdm:carSharing sdm:dropOff sdm:kissAndRide sdm:liftShare sdm:loadingBay sdm:overnightParking sdm:parkAndRide sdm:parkAndCycle sdm:parkAndWalk sdm:vehicleLift sdm:other)
], [
  sh:path sdm:totalSpotNumber;
  sh:description "Property. The total number of spots offered by this parking site. This number can be difficult to be obtained for those parking locations on which spots are not clearly marked by lines. Model:'http://schema.org/Number'. Normative references: DATEX 2 version 2.3 attribute _parkingNumberOfSpaces_ of the _ParkingRecord_ class.";
  sh:name "totalSpotNumber";
  sh:minInclusive 0;
  sh:datatype xsd:integer
], [
  sh:path sdm:availableSpotNumber;
  sh:description "Property. The number of spots available globally, including reserved spaces, such as those for disabled people, long term parkers and so on. This might be harder to estimate at those parking locations on which spots borders are not clearly marked by lines. Model:'http://schema.org/Number'";
  sh:name "availableSpotNumber";
  sh:minInclusive 0;
  sh:datatype xsd:integer
], [
  sh:path sdm:extraSpotNumber;
  sh:description "Property. The number of extra spots available, i.e. free. Extra    spots are those reserved for special purposes and usually require a permit. Permit details will be found at parking group level (entity of type `ParkingGroup`). This value must aggregate free spots from all groups devoted to special parking conditions. Model:'http://schema.org/Number'. Allowed values: A positive integer number, including 0. `extraSpotNumber` plus `availableSpotNumber` must be lower than or equal to `totalSpotNumber";
  sh:name "extraSpotNumber";
  sh:minInclusive 0;
  sh:datatype xsd:integer
], [
  sh:path sdm:occupancyDetectionType;
  sh:name "occupancyDetectionType";
  sh:in (sdm:balancing sdm:manual sdm:modelBased sdm:none sdm:singleSpaceDetection)
], [
  sh:path sdm:parkingMode;
  sh:description "Property. Parking mode(s). Enum:'echelonParking, parallelParking, perpendicularParking'";
  sh:name "parkingMode";
  sh:in (sdm:echelonParking sdm:parallelParking sdm:perpendicularParking)
], [
  sh:path sdm:areBordersMarked;
  sh:description "Property. Denotes whether parking spots are delimited (with blank lines or similar) or not. Model:'https://schema.org/Boolean'";
  sh:name "areBordersMarked";
  sh:datatype xsd:boolean
], [
  sh:path sdm:averageSpotWidth;
  sh:description "Property. The average width of parking spots. Model:'https://schema.org/width'";
  sh:name "averageSpotWidth";
  sh:minInclusive 0;
  sh:datatype xsd:decimal
], [
  sh:path sdm:averageSpotLength;
  sh:description "Property. The average length of parking spots. Model:'https://schema.org/length'";
  sh:name "averageSpotLength";
  sh:minInclusive 0;
  sh:datatype xsd:decimal
], [
  sh:path sdm:refParkingSpot;
  sh:name "refParkingSpot";
  sh:datatype xsd:anyURI
], [
  sh:path sdm:refParkingGroup;
  sh:name "refParkingGroup";
  sh:datatype xsd:string
], [
  sh:path sdm:outOfServiceSlotNumber;
  sh:description "Property. Model:'https://schema.org/Number'. The number of bike racks/bike-docking slots or parking slots that are out of order and cannot be used to hire or park a bike in the bike docking station or parking site corresponding to this observation.";
  sh:name "outOfServiceSlotNumber";
  sh:datatype xsd:decimal
], [
  sh:path sdm:parkingSiteId;
  sh:description "Property. Model:'https://schema.org/Text'. The unique ID of the parking site or parking lot corresponding to this observation.";
  sh:name "parkingSiteId";
  sh:datatype xsd:string
], [
  sh:path sdm:observationDateTime;
  sh:description "Property. Model:'https://schema.org/Text'. Last reported time of observation.";
  sh:name "observationDateTime";
  sh:datatype xsd:dateTime
], [
  sh:path sdm:fourWheelerSlots;
  sh:description "Property. Model:'https://schema.org/Text. Four wheeler parking spot availability status in parking site corresponding to this observation.";
  sh:name "fourWheelerSlots"
].
sdm:FourWheelerSlotShape rdf:type sh:NodeShape;
    sh:targetClass sdm:FourWheelerSlot;
    sh:property [
  sh:path sdm:availableSlotNumber;
  sh:description "Property. Model:'https://schema.org/Number'. Number of parking spots available for use in the smart parking site corresponding to this observation. This must a positve number lower than or equal to the totalSpotNumber.";
  sh:name "availableSlotNumber";
  sh:datatype xsd:decimal
], [
  sh:path sdm:totalSlotNumber;
  sh:description "Property. Model:'https://schema.org/Number'. The total number of spots offered by the parking site corresponding to this observation.";
  sh:name "totalSlotNumber";
  sh:datatype xsd:decimal
], [
  sh:path sdm:occupiedSlotNumber;
  sh:description "Property. Model:'https://schema.org/Number'. Number of parking spots occupied in the smart parking site corresponding to this observation. This must a positve number lower than or equal to the totalSpotNumber.";
  sh:name "occupiedSlotNumber";
  sh:datatype xsd:decimal
], [
  sh:path sdm:unclassifiedSlots;
  sh:description "Property. Model:'https://schema.org/Text. Unclassified vehicles or other vehicles parking spot availability status in parking site corresponding to this observation.";
  sh:name "unclassifiedSlots"
].
sdm:UnclassifiedSlotShape rdf:type sh:NodeShape;
    sh:targetClass sdm:UnclassifiedSlot;
    sh:property [
  sh:path sdm:availableSpotNumber;
  sh:description "Property. Model:'https://schema.org/Number'. Number of parking spots available for use in the smart parking site corresponding to this observation. This must a positve number lower than or equal to the totalSpotNumber.";
  sh:name "availableSpotNumber";
  sh:datatype xsd:decimal
], [
  sh:path sdm:totalSpotNumber;
  sh:description "Property. Model:'https://schema.org/Number'. The total number of spots offered by the parking site corresponding to this observation.";
  sh:name "totalSpotNumber";
  sh:datatype xsd:decimal
], [
  sh:path sdm:occupiedSpotNumber;
  sh:description "Property. Model:'https://schema.org/Number'. Number of parking spots occupied in the smart parking site corresponding to this observation. This must a positve number lower than or equal to the totalSpotNumber.";
  sh:name "occupiedSpotNumber";
  sh:datatype xsd:decimal
], [
  sh:path sdm:twoWheelerSlots;
  sh:description "Property. Model:'https://schema.org/Text. Two wheeler parking spot availability status in parking site corresponding to this observation.";
  sh:name "twoWheelerSlots"
].
sdm:TwoWheelerSlotShape rdf:type sh:NodeShape;
    sh:targetClass sdm:TwoWheelerSlot;
    sh:property [
  sh:path sdm:availableSpotNumber;
  sh:description "Property. Model:'https://schema.org/Number'. Number of parking spots available for use in the smart parking site corresponding to this observation. This must a positve number lower than or equal to the totalSpotNumber.";
  sh:name "availableSpotNumber";
  sh:datatype xsd:decimal
], [
  sh:path sdm:totalSpotNumber;
  sh:description "Property. Model:'https://schema.org/Number'. The total number of spots offered by the parking site corresponding to this observation.";
  sh:name "totalSpotNumber";
  sh:datatype xsd:decimal
], [
  sh:path sdm:occupiedSpotNumber;
  sh:description "Property. Model:'https://schema.org/Number'. Number of parking spots occupied in the smart parking site corresponding to this observation. This must a positve number lower than or equal to the totalSpotNumber.";
  sh:name "occupiedSpotNumber";
  sh:datatype xsd:decimal
], [
  sh:path sdm:municipalityInfo;
  sh:description "Property. Model:'https://schema.org/Text. Municipality information corresponding to this observation.";
  sh:name "municipalityInfo"
].
sdm:MunicipalityInfoShape rdf:type sh:NodeShape;
    sh:targetClass sdm:MunicipalityInfo;
    sh:property [
  sh:path sdm:district;
  sh:description "Property. Model:'https://schema.org/Text'. District name corresponding to this observation.";
  sh:name "district";
  sh:datatype xsd:string
], [
  sh:path sdm:ulbName;
  sh:description "Property. Model:'https://schema.org/Text'. Name of the Urban Local Body corresponding to this observation.";
  sh:name "ulbName";
  sh:datatype xsd:string
], [
  sh:path sdm:cityId;
  sh:description "Property. Model:'https://schema.org/Text'. City ID corresponding to this observation.";
  sh:name "cityId";
  sh:datatype xsd:string
], [
  sh:path sdm:wardId;
  sh:description "Property. Model:'https://schema.org/Text'. Ward ID corresponding to this observation.";
  sh:name "wardId";
  sh:datatype xsd:string
], [
  sh:path sdm:stateName;
  sh:description "Property. Model:'https://schema.org/Text'. Name of the state corresponding to this observation.";
  sh:name "stateName";
  sh:datatype xsd:string
], [
  sh:path sdm:cityName;
  sh:description "Property. Model:'https://schema.org/Text'. City name corresponding to this observation";
  sh:name "cityName";
  sh:datatype xsd:string
], [
  sh:path sdm:zoneName;
  sh:description "Property. Model:'https://schema.org/Text'. Zone name corresponding to this observation.";
  sh:name "zoneName";
  sh:datatype xsd:string
], [
  sh:path sdm:zoneId;
  sh:description "Property. Model:'https://schema.org/Text'. Zone ID corresponding to this observation.";
  sh:name "zoneId";
  sh:datatype xsd:string
], [
  sh:path sdm:wardName;
  sh:description "Property. Model:'https://schema.org/Text'. Ward name corresponding to this observation.";
  sh:name "wardName";
  sh:datatype xsd:string
], [
  sh:path sdm:wardNum;
  sh:description "Property. Model:'https://schema.org/Number'. Ward number corresponding to this observation.";
  sh:name "wardNum";
  sh:datatype xsd:decimal
].
